{"version":3,"sources":["LogoTecNM.jpg","Componentes/Header.js","Componentes/Body.js","Componentes/Footer.js","Componentes/Fecha.js","Componentes/Logo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","Body","alert","Button","variant","onClick","functAlerta","Footer","this","props","copyr","Fecha","f","Date","getDay","getDate","getMonth","getFullYear","dateTime","Logo","src","LogoApp","width","height","alt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,uC,gRCa5BC,G,mLARP,OACI,yBAAKC,UAAY,UACb,wF,GAJKC,c,gBC4BNC,G,kLAxBGC,MAAM,uB,+BACX,IAAD,OACJ,OAEJ,yBAAKH,UAAY,QACb,oDAGA,6BACA,2BACE,4BACA,oDACA,4CACA,yDACA,yCACA,uCAEE,6BACJ,kBAACI,EAAA,EAAD,CAAQC,QAAS,kBAAkBC,QAAW,WAAK,EAAKC,gBAAxD,iB,GApBWN,cCSJO,G,6KATP,OAEI,yBAAKR,UAAY,UACZS,KAAKC,MAAMC,W,GALPV,cCmBNW,G,+KAhBP,IAEIC,EAAE,IAAIC,KACV,MAFiB,CAAC,UAAU,QAAQ,SAAS,eAAY,SAAS,UAAU,aAE1DD,EAAEE,UAAY,KAAOF,EAAEG,UAAY,OAHzC,CAAC,QAAQ,UAAU,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,SAAS,aAAa,UAAU,YAAY,aAG9CH,EAAEI,YAAc,OAASJ,EAAEK,gB,+BAI/F,OACI,yBAAKlB,UAAY,SACZS,KAAKU,gB,GAZFlB,c,yBCYLmB,E,uKATP,OACI,yBAAKpB,UAAY,YACb,yBAAKqB,IAAOC,IAASC,MAAQ,QAAQC,OAAS,OAAOC,IAAM,c,GAJxDxB,aCkBJyB,E,uKAXb,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQW,MAAS,mF,GATLV,aCIE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.40339656.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/LogoTecNM.96aff77c.jpg\";","import React,{Component} from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n            <div className = \"Header\">\r\n                <p>Desarrollo de aplicaciones para dispositivos moviles</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React,{Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button } from 'react-bootstrap';\r\nimport './Body.css';\r\n\r\nclass Body extends Component{\r\n\r\n    functAlerta(){alert(\"Hello, everybody!\")}\r\n    render(){\r\n        return(\r\n\r\n    <div className = \"Body\">\r\n        <p>\r\n            Practica 1 - Unidad 2\r\n        </p>\r\n        <br></br>\r\n        <p>\r\n          <ol>\r\n          <li>Tipos de componentes</li>\r\n          <li>Contenedores</li>\r\n          <li>Usar mas de un componente</li>\r\n          <li>Funciones</li>\r\n          <li>Props</li>\r\n          </ol> \r\n        </p><br></br>\r\n        <Button variant= \"outline-primary\" onClick = {()=>{this.functAlerta()}} >click me</Button>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body;","import React,{Component} from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends Component{\r\n    render(){\r\n        return(\r\n\r\n            <div className = \"Footer\">\r\n                {this.props.copyr}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React,{Component} from 'react';\r\nimport './Fecha.css';\r\n\r\nclass Fecha extends Component{\r\n\r\n    dateTime(){\r\n        var meses = [\"Enero\",\"Febrero\",\"Marzo\",\"Abril\",\"Mayo\",\"Junio\",\"Julio\",\"Agosto\",\"Septiembre\",\"Octubre\",\"Noviembre\",\"Diciembre\"];\r\n        var diasSemana = [\"Domingo\",\"Lunes\",\"Martes\",\"Miércoles\",\"Jueves\",\"Viernes\",\"Sábado\"];\r\n        var f=new Date();\r\n        return diasSemana[f.getDay()] + \", \" + f.getDate() + \" de \" + meses[f.getMonth()] + \" de \" + f.getFullYear()\r\n      }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"Fecha\">\r\n                {this.dateTime()}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Fecha;","import React,{Component} from 'react';\r\nimport './Logo-app.css';\r\nimport LogoApp from '../LogoTecNM.jpg';\r\n\r\nclass Logo extends Component{\r\n    render(){\r\n        return(\r\n            <div className = \"Logo-app\">\r\n                <img src = {LogoApp} width = \"300px\" height = \"auto\" alt = \"logo\"></img>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Logo;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Componentes/Header';\nimport Body from './Componentes/Body';\nimport Footer from './Componentes/Footer';\nimport Fecha from './Componentes/Fecha';\nimport Logo from './Componentes/Logo';\n\nclass App extends Component{\n\n  render(){\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Logo/>\n      <Fecha/>\n      <Body/>\n      <Footer copyr = {<p>Copyright &copy; Todos los derechos reservados.</p>} />\n    </div>\n  )};\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}